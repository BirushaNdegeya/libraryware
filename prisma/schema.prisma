// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Statut{
  Disponible
  Reserve
  Lecture
}

model Admin {
  email                String      @id
  name                 String
  firstName            String
  password             String
  phone                String
  photo                String?
  title                String
}

model User {
  userId               String       @map("ID")  @id @default(uuid())
  name                 String       @map("Nom")
  firstname            String       @map("Prénom")
  photo                String?      @map("Photo de profil")
  email                String       @map("Email") @unique
  password             String       @map("Mot de passe")
  number               String       @map("Numero de téléphone") @unique
  address              String?      @map("Adresse")
  registrationDate     DateTime?    @map("Date d'enregistrement") @default(now()) 
  subscriptionDate     DateTime?    @map("Date d'abonnement")
  subscriptionEndDate  DateTime?    @map("Date de fin d'abonnement")
  status               Boolean?     @map("Statut") @default(false)
  category             Category[]   @relation("UserCategory")
  loan                 Loan[]
}

model Book {
  id                   Int       @map("ID") @id @default(autoincrement())
  categoryId           Int          @map("#id_sous_catégorie")
  author               Int?          @map("#id_auteur")
  title                String?       @map("Titre")
  cover                String?       @map("Cover")
  publicationYear      Int?          @map("Année de publication")
  numberOfPage         Int?          @map("Nombre des pages")
  code                 String?       @map("Code du livre") @unique
  edition              String?       @map("Maison d'édition")
  statut               Statut?       @map("Statut") @default(Disponible)
  category             Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  loan                 Loan[]
}

model Category {
  id                   Int          @map("ID")  @id @default(autoincrement())
  name                 String       @map("Nom")
  description          String?      @map("Description")
  user                 User[]       @relation("UserCategory")
  book                 Book[]
}

model Loan {
  id                   String       @id @default(uuid())
  userId               String       @map("#id_user")
  bookId               Int       @map("#id_book")
  reservationDate      DateTime     @default(now()) @map("Date de réservation")
  loanDate             DateTime?    @map("Date de prêt")
  returnDate           DateTime?    @map("Date de retour")
  user                 User         @relation(fields: [userId], references: [userId])
  book                 Book         @relation(fields: [bookId], references: [id])
}

